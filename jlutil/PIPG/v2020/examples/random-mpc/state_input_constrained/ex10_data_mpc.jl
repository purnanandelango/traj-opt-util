# 02/12/21
# Random MPC
# state and input constrained

const path_to_tools = "../../pipg_toolkit/"
macro load_file(str_val,flg) return :( $flg ? include(string(path_to_tools,$str_val)) : include($str_val) ) end

@load_file "proj_funcs.jl" true			  # library of projection functions	

# module defining the parameters for example 10 problem
module eX 
using LinearAlgebra, StaticArrays         # required packages
using JuMP
using ..proj 							  # library of projection functions

### User-defined algorithm settings

	const kmax_pipg = 5000			   	  # max PIPG    iterations
	const kmax_powiter = 50				  # max power   iterations

	const ϵ_abs = 1e-10					  # small       absolute tolerance
	const ϵ_powiter = 1e-2				  # power iter. exit tolerance							(relative)

	const ϵ_pd_JuMP = 1e-3				  # JuMP solver primal and dual feasibility tolerance	
	const ϵ_gap_JuMP = 1e-3 			  # JuMP solver primal and dual objective gap tolerance

	const ϵ_primal = 1e-3				  # PIPG primal exit tolerance							(relative)
	const ϵ_dual = 1e-3		     		  # PIPG dual   exit tolerance							(relative)
	# const ϵ_admm = 1e-5 				  # admm    	exit tolerance
	
	const ρ_admm = 2.0					  # admm 		step-size

	const solver_JuMP = :gurobi 		  # choice of solver in JuMP (gurobi,mosek,ecos)
	const err_type = :linf  			  # type of norm for computing error (l2,linf)

### User-defined problem parameters

	const nx = 8						  # no. of states
	const nu = 4						  # no. of inputs

	const N = 10   					      # no. of discretization points (prediction horizon)
	const NN = 30						  # no. of dicretization points for main reference

	const ϵ_mpc = 0.001					  # model uncertainty
	const mpc_constr_update = false		  # flag for updating constraints at each MPC solve step

	const Δ = 0.1						  # sampling time (s)
	const tvec = [(j-1)*Δ for j in 1:N]   # time vector (s)

	# system parameters
	const umax = 5.0
	const xmax = 3.0

	# reference trajectory and boundary conditions
	# const yy_unscl = [SVector{nx}(randn(nx)) for _ in 1:NN]
	const yy_unscl = [SVector{nx}(ones(nx)) for _ in 1:NN]
	const x0_unscl_init = SVector{nx}(yy_unscl[1])
	const xf_unscl = SVector{nx}(yy_unscl[N])

	# state segments and scaling
		# no segments
		scl_x = 1.0

	# control segments and scaling
		# no segments
		scl_u = 1.0

	# scaling matrices
		const scl_x_mat = Array(Diagonal(scl_x .* ones(nx)))
		const scl_x_imat = Array(Diagonal( (1/scl_x) .* ones(nx) ))
		const scl_u_mat = Array(Diagonal(scl_u .* ones(nu)))
		const scl_u_imat = Array(Diagonal( (1/scl_u) .* ones(nu) ))

	# ZOH discretization: x(t+1) = Ad*x(t) + Bd*u(t) + gd
		# unscaled
		# Ad_tmp = randn(nx,nx); svd_Ad_tmp = svd(Ad_tmp) 
		# const Ad_unscl = SMatrix{nx,nx}(Ad_tmp ./ svd_Ad_tmp.S[1])		# marginally stable s
		
		# const Bd_unscl = SMatrix{nx,nu}(randn(nx,nu))

		# nx = 8, nu = 4 sample
		const Ad_unscl = SMatrix{nx,nx}([0.0380    0.0347    0.1570   -0.0705   -0.0070    0.0137   -0.1723   -0.1665
									    -0.0767   -0.5602   -0.0134    0.4930    0.0280   -0.0255   -0.3936    0.1629
									    -0.3131    0.1838   -0.1754   -0.0171    0.0172   -0.1564    0.0182    0.1500
 									     0.0869   -0.0529    0.2244   -0.0556    0.4923    0.0339   -0.1534    0.1487
 									     0.3271   -0.3631    0.0198   -0.0159    0.1289    0.2186    0.0464   -0.0044
 									     0.0395    0.1234    0.3401    0.2340    0.1470   -0.2030    0.0098   -0.2160
									    -0.2693   -0.0192   -0.1353   -0.2195   -0.1236    0.0163    0.0517    0.0077
									    -0.1401   -0.1127    0.1423    0.3183    0.1022   -0.0578   -0.1232    0.0111])

		const Bd_unscl = SMatrix{nx,nu}([-0.1519    0.8300    0.7298   -1.4263
									      1.6122    1.0811   -1.1590    0.1885
									     -0.1158    0.7187   -1.3983   -0.9120
									      0.0882   -0.8185    0.5910    0.3325
									      1.7692   -0.9932    0.1764   -0.9761
									      0.9905   -0.7452   -0.0206    0.3449
									     -0.3434    0.1855    0.8265   -1.9642
									      0.8093    0.6282    0.7165    0.2175])

		# # nx = 20, nu = 10 sample
		# const Ad_unscl = SMatrix{nx,nx}([0.0601290534404267	0.198048416515396	-0.216081233527749	-0.145716309534794	0.162583043782962	-0.0531687415051811	-0.0370464267582733	-0.0298339902044454	0.0987887788053269	-0.0529632067703950	-0.0337577352694424	-0.414766675065446	-0.129356317175006	-0.158194352069240	-0.275699140804818	0.0836523367311535	0.0828057410280661	-0.0478902380109025	-0.0205226959163996	0.126999068732727
		# 								-0.119700194296257	-0.108371891034385	-0.126610131438399	0.0603064851380237	8.16463324388289e-05	-0.134410335201052	0.0427619233872704	-0.0822884391557416	0.129049264337189	0.0310424520001999	-0.0681274305555494	0.00575158304151710	-0.187532883335742	-0.131959111947090	0.0796733790286011	-0.303042132137950	0.0162055553410905	0.207236306411868	-0.0795585038737505	0.0738472898623758
		# 								0.0926792222292227	-0.112510967363086	-0.0804613233292860	-0.0273123389476210	0.00530033810260321	-0.00280103677105697	0.0674665036992431	-0.171962199312015	-0.210162581301705	0.0645560630582722	-0.0547721092653389	-0.0264929352200193	0.160369316831912	-0.102006369859606	-0.167284168600290	0.110094181288378	-0.0849075744344705	0.0490272638354703	-0.124137095458137	-0.186814498767366
		# 								-0.0317002739600571	-0.0448562520220555	-0.170366624044737	0.0648832755175489	0.0466744591512385	0.103981841755728	-0.115533130524452	-0.228878661377867	-0.0213969015683275	0.0753288001799539	0.0918964786625841	-0.102272237495163	-0.0884028906132510	-0.0415517229788108	0.0946439863162850	-0.0122117303847905	0.228757478981557	-0.160861198421445	-0.0176828377955268	0.0909307922218545
		# 								0.0159169931825142	-0.00327576459929189	0.124625110145513	-0.0864940381548919	0.106509506217544	0.0980374731291508	-0.143932469771504	0.0274687943451948	-0.104185876808085	0.0712857268385260	-0.0198789572399565	-0.0748868049103096	0.105309821031828	-0.0762275597178128	0.0591636515791456	-0.0107259305250144	-0.00871433454471133	0.137117126705255	0.127856280266833	0.0563633232815294
		# 								0.00521375907014572	0.209101844798700	-0.00853669756964016	-0.133046709399587	-0.168989491528670	0.175911362282927	-0.0383505706007031	0.0223884331934444	0.169757652660951	-0.115351330899669	-0.0652712754983835	-0.0810373927449277	0.0702398812793973	-0.0942935567407171	0.0343074351390699	-0.0675568585937823	-0.194352325840704	0.0946212487460518	-0.0851524926523289	0.0264692743608358
		# 								0.170573259243382	-0.0574720407507567	0.0397594067190951	-0.00786640270788473	-0.263449507023578	0.0631678666958134	-0.00974935221650299	-0.0517541932373735	0.208446962075566	0.0675677194323994	0.00695300719341477	0.236017505998010	-0.0630028532878443	0.0572118135332535	0.0417203625593985	0.0881640739534961	-0.0330496058560292	-0.0539208478616569	0.155551588510927	0.00104736115323007
		# 								-0.0814631900702775	0.0173775613322733	-0.0502136308303686	0.154687754008478	-0.132733477086811	-0.165256845477949	0.133487487161715	-0.0820831935826048	-0.0399553987341946	0.122434370218258	-0.0486571946745894	-0.173725710637760	-0.0256619091896803	0.0670334822558234	0.0393746820545955	0.0482880267930193	0.00614575188928219	0.110664472324181	0.184956478576124	-0.0622826272298447
		# 								0.233750177697434	0.0285753577658986	0.0340943011737742	-0.119509429671808	-0.0698351379144816	0.0558667082087249	-0.0993304304700145	0.000738695011868195	0.119379676027489	-0.285517924009175	0.0389753693721394	0.0246483261108818	0.00500620184021506	0.323779181204402	-0.0670551335986571	0.0298190610828404	0.275066213780219	-0.0808909365302834	0.0999480736318925	0.0217095702952372
		# 								-0.0105431470072990	-0.110959827821929	0.106497046848855	0.0721843796493889	0.0234036441853239	0.0367535477797379	0.188284940959572	0.107824795347543	-0.0588368655338055	0.0195446930968022	0.131832571851075	-0.0938054422359472	0.00460088823910917	0.118927901423541	0.0294779220849402	-0.0717713197498743	-0.00932751332317770	-0.0106335607202091	-0.153502152868169	0.0431316914558868
		# 								-0.0355153591449991	-0.200541446732634	0.0909643137727841	0.0726560000215799	0.0390065663970649	0.134393024341810	-0.130927413737467	0.0551260935109527	-0.0739168396577984	-0.146456816797407	-0.0733857011718760	-0.0387531824687158	0.0489019354517979	0.127066771803288	0.103582741449994	0.213738934707538	-0.172561221077022	-0.0139821472404289	0.180884900763434	-0.0562188889334943
		# 								-0.168638444765879	-0.0793136545054131	0.153894115643661	0.0527855082661903	-0.128147431234620	0.356662919670519	-0.0630510973314869	-0.0728759968465907	-0.0728934307949598	0.0627197683350928	-0.00520603243495421	-0.139824168525265	-0.123463207448181	-0.0438342814316993	-0.0198193333448940	-0.0930423719982624	-0.0844407441521670	0.164164191324643	-0.102369292567702	0.0993056136728713
		# 								-0.0727587010191639	0.182629823193699	0.00651596326869112	0.107769039161771	-0.148448453720587	0.0140838331663830	0.157121799421655	-0.00572964742581784	-0.00679067808347925	0.0906983747953758	-0.0146189962616028	-0.224207409916230	-0.279017237041426	-0.0201536949340914	0.0426822190731349	0.124035337436239	0.0692730575501673	-0.0768721202770277	-0.00623407716550328	0.145893973107841
		# 								-0.103696926216845	-0.0398624683273845	-0.126262854167133	0.127906536051373	-0.0104122873001698	0.0489471762628344	-0.143172792057789	-0.0156763784805239	0.0560370034601485	0.216407567073790	0.0922874242861147	-0.0689512132259720	-0.111511283129773	0.0170023262973753	0.0514832420464581	-0.105847800555027	0.149818455917906	0.135126328303481	0.0170233108807265	0.00799166697091551
		# 								0.117412356116875	-0.215865954708402	-0.0914697780799335	-0.0923034314731311	-0.238236665262679	0.0965271156713803	-0.126015861377146	-0.0594272734280601	-0.0635164764745237	0.0838345597418973	0.0606042240340063	0.182486597602686	-0.0693607002424733	-0.0724377201028450	-0.228455338091318	0.0467108364200499	-0.0351604786348679	-0.0788029121960381	-0.00810669871085605	-0.287325261499454
		# 								-0.189639500090166	0.168365031997291	-0.183586515707797	-0.0833483799986815	0.0289722455714172	0.0186682061227386	0.0232094036338323	0.245479535382388	0.0114626724100184	-0.258875968399247	-0.0252942064105392	0.113778473479792	-0.0226278054494432	0.00214303223900976	-0.0934203716800431	0.114386232768712	-0.0304236214808742	0.00713159297477079	0.000322838069128865	0.0396742804589346
		# 								-0.0729712738476214	0.00634579298006077	-0.0567604406066295	0.0738044544549505	-0.0439039609526802	-0.242504527522394	-0.0270092088770300	0.134439571670262	-0.0257055247215137	-0.00626488873101320	-0.194563012278873	-0.199640891871960	0.0870427332978812	-0.0227120013972657	-0.290033217079106	0.172475916797398	-0.0150459295348733	0.0273913975861625	0.0460175742674081	0.0141266147864700
		# 								-0.121311671422721	0.150210286764629	0.0894697518465338	-0.210764889173551	0.247333015941317	0.0898113268701645	0.0160506025304750	0.183690990709010	0.0123635880318245	0.0339718545681703	0.0134548000644680	0.0461499332827329	0.121746467540465	-0.0605065788026772	-0.102710359236723	-0.00477246291538455	-0.0615055776114076	-0.0814879788242108	0.101681977833652	0.0472633363322471
		# 								0.0612434813326456	-0.0966996942564536	-0.00848348886573644	0.0747359478835863	-0.0954339165668828	0.177550190922933	0.00955272900712701	-0.00890808636070739	-0.0946050951894641	-0.0326372180247146	-0.0157139611625945	0.0665527092448248	0.197405910900023	0.171902086375755	-0.140970593854719	0.0349872079646672	-0.00151437310175753	-0.127295951538586	-0.169134911346935	-0.106053524389569
		# 								0.203884684505979	-0.0338606534934310	-0.00647909343644224	-0.0258161673473166	0.0377964121803479	0.0641510054519477	0.0990167162879518	0.135458163223374	-0.137904346810292	0.128364889040397	-0.00406128024631367	0.178175200965535	-0.0179570350285780	0.257561946484258	-0.146418384395057	0.0559031482222273	-0.00655527554529614	-0.0135347871934999	0.0495197044032359	-0.00844479969647689])

		# const Bd_unscl = SMatrix{nx,nu}([-0.774327154124615	-0.269665188578112	0.374687367709406	-0.0915817825048939	1.33089735559830	0.954052265209799	-0.162069902522281	0.243036480185009	0.0380998561740416	-0.152389532209055
		# 								-0.714423278501464	0.456920025211879	-0.0491168168929407	0.203622942917733	-0.474049522463766	0.660938722552343	-0.274400952478815	-0.203904172736406	2.46006812197010	-0.291977891922695
		# 								-0.390349620279581	0.548826366694116	-0.790007975953157	1.50916322081364	2.28252935301869	1.47832150171382	1.27122429087421	0.0863007124405325	-1.01941926079727	-0.889486039685422
		# 								0.431136010223527	0.489973051124830	-0.703465286512103	2.49817852329181	-0.561857667746945	2.27392213081836	2.39767287425169	1.81520382644896	0.704858239545469	-0.188805200002305
		# 								-0.568208076907531	0.333861475079959	-0.115486951402472	0.418849657152877	0.288711607368434	1.47631677577563	-0.646136276165831	-0.498054617999101	3.02032661645459	-0.837446909367133
		# 								0.311847540944002	0.0495825119523786	-2.72551016517382	0.764741320612122	-0.239040549273034	-0.411435276778732	1.62194245854016	0.554086849704555	2.36725634858766	-1.31518203593811
		# 								1.77880057213946	-0.153010170399231	-1.25751543463835	-0.837246605788408	-1.18045430938483	-1.77729961772584	0.213558572602493	0.636320384761902	0.0814783778244191	0.163090894537988
		# 								-1.75074166658806	1.46001804010179	0.119612259195441	0.329445725705235	1.19958531705100	0.141976176279150	-1.40776266799161	1.71154413653630	-1.34283749370036	0.855274435406403
		# 								0.509076772728507	0.739725308395441	1.73824843988328	-0.355656494152681	0.108137835686418	0.330816312260046	-0.317452735056953	-1.13750854313923	0.106549173896139	1.62399119058425
		# 								-0.863168767987540	0.350602970885842	-0.726478512828176	-0.700289615381673	-1.88920035787452	0.941853990954772	0.0116697932578128	-1.89953863753255	-1.54453127370896	-0.295239130913230
		# 								-0.171948895163530	-0.199052683768152	-0.472392743832164	-0.447731873036791	1.40863412326305	0.751476671268643	1.83675861158550	-0.786199709229765	-2.59891054463934	0.341169065772407
		# 								1.17630829030765	-0.00705104781675460	0.915996907774820	-0.385203988200170	-0.0818327303400477	-0.557908260256047	0.524867838398950	0.452347469533786	-1.98367875790336	-2.20348580362193
		# 								-1.14398074193202	-0.341236208340300	-0.500176730294820	1.32997639389606	-1.42125885395825	-1.55178812729202	0.507545464348098	1.52874302878860	-1.07237687157057	1.78260411510270
		# 								0.466541328613054	-0.806886958677481	-0.412573955093238	0.466684629942518	-1.24553097117094	-1.20054120647205	-0.770373159587331	-0.460428723395361	1.32455584019709	0.251907742996463
		# 								1.26625397644780	1.02791083663188	1.02951497011758	0.149919852361803	0.535376435344122	-0.0501784681626598	-2.09530264957546	0.602231227970686	-0.182997450470322	0.838605283923745
		# 								1.86979905436442	-0.754439992952556	-1.11748573955973	0.412079221219610	-1.75263041207021	0.815608261295473	1.16541590687471	1.46071087019176	-0.189953683261410	0.625162020552914
		# 								0.648439282116428	-0.595478577894575	0.100476316371651	1.30248321472450	-1.05333969681777	1.27190872959045	0.0306155302751325	-0.693468722485281	0.108378952475839	-0.393281298828662
		# 								0.287137670887717	-1.13463363856486	-0.263017666898326	-1.60814482851819	0.834198073926571	0.371358766258166	2.50653716732399	0.235861812978410	0.341732221539151	-0.695343555565500
		# 								-1.03127249758357	-0.359393386007477	-1.89057024840033	1.41186610184634	0.547464411343391	0.00366232452840602	-1.05085922710456	1.72218204134294	1.70882158296597	0.299219272542748
		# 								0.139895499336703	0.415746257554979	0.265227384142125	0.877483356314814	1.00121048864798	1.76140682909019	2.85680324429774	1.11862115013451	-1.36416576900517	0.179165931557168])



		const gd_unscl = SVector{nx}(zeros(nx))

		# scaled
		const Ad = SMatrix{nx,nx}(scl_x_imat*Ad_unscl*scl_x_mat)
		const Bd = SMatrix{nx,nu}(scl_x_imat*Bd_unscl*scl_u_mat)
		const gd = SVector{nx}(scl_x_imat*gd_unscl)

		const mAdT = SMatrix{nx,nx}(-1 .* Array(transpose(Ad)))
		const mBdT = SMatrix{nu,nx}(-1 .* Array(transpose(Bd)))

		const x0 = MVector{nx}(scl_x_imat*x0_unscl_init)			# scaled initial state updated after plant propagation at each instant
		# const xf = SVector{nx}(scl_x_imat*xf_unscl)
		const y = [MVector{nx}(scl_x_imat*yy_unscl[t]) for t = 1:N] # scaled reference for prediction horizon
		# mpc_utils has functions for updating x0 and y
		uref = nothing

	# LQR weighting matrices
	const Q = SMatrix{nx,nx}(scl_x_mat*Array(Diagonal( (1/scl_x^2) .* ones(nx) ))*scl_x_mat)
	const R = SMatrix{nu,nu}(scl_u_mat*Array(Diagonal( (1/scl_u^2) .* ones(nu) ))*scl_u_mat)
	const Qf = SMatrix{nx,nx}(scl_x_mat*Array(Diagonal( (1/scl_x^2) .* ones(nx) ))*scl_x_mat)

	# step-size parameters (min and max eigenvalues of LQR weight matrices)
	const μ = min(min([R[i,i] for i in 1:nu]...),min([Q[i,i] for i in 1:nx]...),min([Qf[i,i] for i in 1:nx]...))
	const λ = max(max([R[i,i] for i in 1:nu]...),max([Q[i,i] for i in 1:nx]...),max([Qf[i,i] for i in 1:nx]...))

	@assert μ>0 && (λ/μ)<10 "Condition number of objective Hessian is too larger: $(λ/μ). Modify Q, R and Qf"

	# constraints

		# bound on control input (box)
		const l_umax = -umax/scl_u
		const u_umax = umax/scl_u


		# bound on state (box)
		const l_xmax = -xmax/scl_x
		const u_xmax = xmax/scl_x

### Specifications for projection on constraint sets
	# projection counter
	const proj_count_limit = SVector{2}([1,1])			# asymptotic projection estimate for x and u	
	const proj_counter = MVector{2}(randn(2))			# [proj_count_x, proj_count_u]

	const x_y_admm = [nothing for _ in 1:N-1]
	const x_u_admm = [nothing for _ in 1:N-1]
	const u_y_admm = [nothing for _ in 1:N-1]
	const u_u_admm = [nothing for _ in 1:N-1]

	const project_x!(x,z,t) = proj.box!(x,z,l_xmax,u_xmax,nx)

	const project_u!(u,z,t) = proj.box!(u,z,l_umax,u_umax,nu)

	# diagnostics projection functions
	function project_x_diagnostic!(x,z,t)
		project_x!(x,z,t)
		proj_counter[1] = 1.0
	end
	function project_u_diagnostic!(u,z,t)
		project_u!(u,z,t)
		proj_counter[2] = 1.0
	end

	# specify constraints in a JuMP problem
	function set_constr_JuMP!(model,x,u)			

		# bounds on state
		@constraint(model,[t=1:N-1],l_xmax .* ones(nx) .≤ x[:,t+1] .≤ u_xmax .* ones(nx))

		# bounds on control
		@constraint(model,[t=1:N-1],l_umax .* ones(nu) .≤ u[:,t] .≤ u_umax .* ones(nu))

	end
end	