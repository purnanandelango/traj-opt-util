function ex10_sfun_lib_aux(id,varargin)
% auxiliary file for ex10_sfun_lib

% 
% This file is generated by FiOrdOs, a program licensed under GPL
% by copyright holder Automatic Control Laboratory, ETH Zurich.
% 
% If you are interested in using this file commercially,
% please contact the copyright holder.
% 

switch id
    case 'cb'
        maskCallback(varargin{:});
    case 'init'
        maskInit(varargin{:});
    otherwise
        error('Unknown identifier "%s".',id);
end
end

function maskCallback(blk,maskParamNum)
vals = get_param(blk,'MaskValues');
vis  = get_param(blk,'MaskVisibilities');
switch vals{maskParamNum}
    case {'external'}
        vis{maskParamNum+1}='off';
    case {'internal'}
        vis{maskParamNum+1}='on';
end
set_param(blk,'MaskVisibilities',vis);
end

function maskInit(blk)
try
    bn={'algoInner.init [120x1]','algoInner.maxit [1x1]','algoInner.stopgEps [1x1]','algoOuter.init [40x1]','algoOuter.maxit [1x1]','algoOuter.stopgEps [1x1]'};
    ds={'d_algoInner_init','d_algoInner_maxit','d_algoInner_stopgEps','d_algoOuter_init','d_algoOuter_maxit','d_algoOuter_stopgEps'};
    vals={'s_algoInner_init','s_algoInner_maxit','s_algoInner_stopgEps','s_algoOuter_init','s_algoOuter_maxit','s_algoOuter_stopgEps'};
    portNext=4;
    for i=1:length(ds)
        fullbnm=[blk,'/',bn{i}];
        switch get_param(blk,ds{i})
            case 'external'
                if strcmp(get_param(fullbnm,'BlockType'),'Constant')
                    pos=get_param(fullbnm,'Position');
                    delete_block(fullbnm);
                    try
                        add_block('built-in/Inport',fullbnm);
                    catch err
                    end
                    set_param(fullbnm,'Position',pos,'ForegroundColor','gray');
                end
                set_param(fullbnm,'Port',num2str(portNext));
                portNext=portNext+1;
            case 'internal'
                if strcmp(get_param(fullbnm,'BlockType'),'Inport')
                    pos=get_param(fullbnm,'Position');
                    delete_block(fullbnm);
                    try
                        add_block('built-in/Constant',fullbnm);
                    catch err
                    end
                    set_param(fullbnm,'Position',pos,'Value',vals{i});
                end
        end
    end
catch err
    disp('Failure in Mask Initialization');
    disp(err.identifier);
    disp(err.message);
end
end
